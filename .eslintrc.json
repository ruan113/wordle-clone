{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    // Required for certain syntax usages
    "ecmaVersion": 2022
  },
  "plugins": ["promise", "unused-imports", "no-null"],
  "env": {
    "jest": true
  },
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended",
    "prettier"
  ],
  "rules": {
    "@typescript-eslint/member-delimiter-style": ["error"],
    "@typescript-eslint/semi": ["error"],
    "no-async-promise-executor": "off",
    "@typescript-eslint/explicit-function-return-type": ["warn"],
    "linebreak-style": ["error", "unix"],
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],
    "unused-imports/no-unused-imports": 1,
    "import/no-unresolved": "off",
    "object-shorthand": "off",
    "@typescript-eslint/ban-ts-comment": "off",
    // Warn against nested then() or catch() statements
    "promise/no-nesting": "warn",
    // Disable warning/errors when empty function
    "no-empty-function": "off",
    // Error against template literal placeholder syntax in regular strings
    "no-template-curly-in-string": "error",
    // Require the use of === and !==
    "eqeqeq": "error",
    // Error if return statements do not either always or never specify values
    "consistent-return": "error",
    // Warn if no return statements in callbacks of array methods
    "array-callback-return": "warn",
    // Disallow null comparisons without type-checking operators
    "no-eq-null": "error",
    // Disallow use of nulls
    "no-null/no-null": "error",
    // Disallow the use of eval()
    "no-eval": "error",
    // Warn against unnecessary calls to .bind()
    "no-extra-bind": "warn",
    // Warn against unnecessary labels
    "no-extra-label": "warn",
    // Disallow leading or trailing decimal points in numeric literals
    "no-floating-decimal": "error",
    // Warn against shorthand type conversions
    "no-implicit-coercion": "error",
    // Warn against function declarations and expressions inside loop statements
    "no-loop-func": "error"
    // Disallow new operators with the Function object
    // "no-new-func": 2,
    // // Warn against new operators with the String, Number, and Boolean objects
    // "no-new-wrappers": 1,
    // // Disallow throwing literals as exceptions
    // "no-throw-literal": 2,
    // // Require using Error objects as Promise rejection reasons
    // "prefer-promise-reject-errors": 2,
    // // Enforce “for” loop update clause moving the counter in the right direction
    // "for-direction": 2,
    // // Enforce return statements in getters
    // "getter-return": 2,
    // // Disallow await inside of loops
    // "no-await-in-loop": "off",
    // // Disallow comparing against -0
    // "no-compare-neg-zero": 2,
    // // Warn against catch clause parameters from shadowing variables in the outer scope
    // "no-catch-shadow": 1,
    // // Disallow identifiers from shadowing restricted names
    // "no-shadow-restricted-names": 2,
    // // Enforce return statements in callbacks of array methods
    // "callback-return": 2,
    // // Require error handling in callbacks
    // "handle-callback-err": 2,
    // // Warn against string concatenation with __dirname and __filename
    // "no-path-concat": 1,
    // // Prefer using arrow functions for callbacks
    // "prefer-arrow-callback": 1,
    // // Return inside each then() to create readable and reusable Promise chains.
    // // Forces developers to return console logs and http calls in promises.
    // "promise/always-return": "off",
    // //Enforces the use of catch() on un-returned promises
    // "promise/catch-or-return": 2,
    //
  }
}
